AWSTemplateFormatVersion: '2010-09-09'

#   --------------------------------------------------------
#   Version History
#
#   v1.0  L. Leonard   Initial Version
#   --------------------------------------------------------

Description: >-
  v1.0. Lambda consuming message from SQS queue and storing a part of the message in DynamoDB table
Resources:
  rKMSPOCMsgProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KMSPOCMsgProcessorLambda
      Handler: index.handler
      Runtime: python3.8
      Description: Message processor function
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import boto3

          tablename = 'Person'
          
          def handler(event, context):
              print(str(event))
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(tablename)
              for record in event['Records']:
                  action = record["messageAttributes"]["Action"]["stringValue"]
                  if action == 'creation' :
                      body = record["body"].split(",")
                      table.put_item(
                        Item={
                              'Name': body[0],
                              'Firstname': body[1]
                          }
                      )
              dynamodbresponse = table.scan()
              response=json.dumps(dynamodbresponse)
              print(response)
              return response
      MemorySize: 128
      Timeout: 60
      TracingConfig:
        Mode: Active
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/KMS-POC-MsgProcessor-role-eu-west-1
  rMyEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !ImportValue my-sqs-queue
      FunctionName: !GetAtt rKMSPOCMsgProcessor.Arn